// Mocks generated by Mockito 5.1.0 from annotations
// in news_app/test/bloc/headlines_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:domain/article/article.entity.dart' as _i4;
import 'package:domain/article/article.filter.dart' as _i5;
import 'package:domain/article/article.repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [ArticleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleRepository extends _i1.Mock implements _i2.ArticleRepository {
  MockArticleRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ArticleModel>> getArticlesWithFilters(
          {_i5.ArticleFilter? filter}) =>
      (super.noSuchMethod(
              Invocation.method(#getArticlesWithFilters, [], {#filter: filter}),
              returnValue:
                  Future<List<_i4.ArticleModel>>.value(<_i4.ArticleModel>[]))
          as _i3.Future<List<_i4.ArticleModel>>);
  @override
  _i3.Future<List<_i4.ArticleModel>> getTopHeadlines(
          {_i5.ArticleFilter? filter}) =>
      (super.noSuchMethod(
              Invocation.method(#getTopHeadlines, [], {#filter: filter}),
              returnValue:
                  Future<List<_i4.ArticleModel>>.value(<_i4.ArticleModel>[]))
          as _i3.Future<List<_i4.ArticleModel>>);
}
